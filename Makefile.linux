# Compiler settings: g++ as the compiler
CXX := g++

# Base flags
BASE_CXXFLAGS := -Wall -O3 -fPIC -std=c++11 -march=native -mtune=native -ffast-math -funroll-loops -fomit-frame-pointer -flto -DNDEBUG -DSPARSE_LIB_EXPORTS
BASE_LDFLAGS := -shared -flto

# OpenMP flag
OPENMP_FLAG := -fopenmp

# Include directories for headers
INCLUDES := -I./include

# Additional libraries to link with
LIBS :=

# Directories for source files, object files, and libraries
SRC_DIR := src
OBJ_DIR := obj
LIB_DIR := sparse_matrix_mult/lib

# Get all .cpp source files from the src directory
SOURCES := $(wildcard $(SRC_DIR)/*.cpp)

# Convert source file names to object file names in the obj directory
OBJECTS := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SOURCES))

# Define the output shared library file
LIBRARY := $(LIB_DIR)/libsparse_x86_64.so

# Perform OpenMP check once at the start
ifeq ($(shell echo "int main() { return 0; }" | $(CXX) $(OPENMP_FLAG) -x c++ -o /dev/null - >/dev/null 2>&1 && echo 1 || echo 0), 1)
    CXXFLAGS := $(BASE_CXXFLAGS) $(OPENMP_FLAG)
    LDFLAGS := $(BASE_LDFLAGS) $(OPENMP_FLAG)
    $(info OpenMP is available. Compiling with OpenMP support.)
else
    CXXFLAGS := $(BASE_CXXFLAGS)
    LDFLAGS := $(BASE_LDFLAGS)
    $(info OpenMP is not available. Compiling without OpenMP support.)
endif

# Default target: Build the shared library
all: $(LIBRARY)

# Link object files into the shared library
$(LIBRARY): $(OBJECTS)
	@mkdir -p $(LIB_DIR)
	@echo "Linking shared library..."
	@echo "Using LDFLAGS: $(LDFLAGS)"
	$(CXX) $(LDFLAGS) $^ -o $@ $(LIBS)

# Compile .cpp source files into .o object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp | $(OBJ_DIR)
	@echo "Compiling $<..."
	@echo "Using CXXFLAGS: $(CXXFLAGS)"
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# Create the obj directory if it doesn't exist
$(OBJ_DIR):
	mkdir -p $@

# Clean target: Remove object files and the library
clean:
	@echo "Cleaning up object files and libraries..."
	@rm -rf $(OBJ_DIR)
	@rm -f $(LIBRARY)

# Print the value of any Makefile variable (for debugging)
print-%:
	@echo $* = $($*)

# Print the value of any Makefile variable (for debugging)
print-%:
	@echo $* = $($*)
